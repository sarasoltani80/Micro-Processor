
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b57  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000474  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051f  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000024a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_11>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  7a:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdCommand>:
//void delay_us(int d){
//	_delay_us(d);
//}

void lcdCommand(unsigned char cmnd){
	LCD_DPRT = cmnd;
  82:	88 bb       	out	0x18, r24	; 24
	LCD_CPRT &= ~ (1<<LCD_RS);
  84:	df 98       	cbi	0x1b, 7	; 27
	LCD_CPRT &= ~ (1<<LCD_RW);
  86:	de 98       	cbi	0x1b, 6	; 27
	LCD_CPRT |= (1<<LCD_EN);
  88:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~ (1<<LCD_EN);
  8c:	dd 98       	cbi	0x1b, 5	; 27
  8e:	81 e2       	ldi	r24, 0x21	; 33
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <lcdCommand+0xe>
  94:	00 00       	nop
  96:	08 95       	ret

00000098 <lcdData>:
	_delay_us(100);
}

void lcdData(unsigned char data){
	LCD_DPRT = data;
  98:	88 bb       	out	0x18, r24	; 24
	LCD_CPRT |= (1<<LCD_RS);
  9a:	df 9a       	sbi	0x1b, 7	; 27
	LCD_CPRT &= ~ (1<<LCD_RW);
  9c:	de 98       	cbi	0x1b, 6	; 27
	LCD_CPRT |= (1<<LCD_EN);
  9e:	dd 9a       	sbi	0x1b, 5	; 27
  a0:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &= ~ (1<<LCD_EN);
  a2:	dd 98       	cbi	0x1b, 5	; 27
  a4:	81 e2       	ldi	r24, 0x21	; 33
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdData+0xe>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <lcd_init>:
	_delay_us(100);
}

void lcd_init(){
	LCD_DDDR = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	LCD_CDDR = 0xFF;
  b2:	8a bb       	out	0x1a, r24	; 26
	
	LCD_CPRT &= ~ (1<<LCD_EN);
  b4:	dd 98       	cbi	0x1b, 5	; 27
  b6:	83 ef       	ldi	r24, 0xF3	; 243
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_init+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_init+0x12>
  c0:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x38);
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	lcdCommand(0x0E);
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
	lcdCommand(0x01);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
  d4:	83 ef       	ldi	r24, 0xF3	; 243
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_init+0x2a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_init+0x30>
  de:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x06);
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
  e6:	08 95       	ret

000000e8 <lcd_gotoxy>:
}

void lcd_gotoxy(unsigned char x, unsigned char y){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <lcd_gotoxy+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <lcd_gotoxy+0x8>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
  f4:	90 e8       	ldi	r25, 0x80	; 128
  f6:	99 83       	std	Y+1, r25	; 0x01
  f8:	90 ec       	ldi	r25, 0xC0	; 192
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	94 e9       	ldi	r25, 0x94	; 148
  fe:	9b 83       	std	Y+3, r25	; 0x03
 100:	94 ed       	ldi	r25, 0xD4	; 212
 102:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstCharAdr[y-1] + x - 1);
 104:	fe 01       	movw	r30, r28
 106:	e6 0f       	add	r30, r22
 108:	f1 1d       	adc	r31, r1
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 81       	ld	r25, Z
 10e:	89 0f       	add	r24, r25
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcdCommand>
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_gotoxy+0x2e>
 11a:	00 00       	nop
	_delay_us(100);
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_print>:

void lcd_print(char *str){
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while(str[i] != 0){
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	59 f0       	breq	.+22     	; 0x14e <lcd_print+0x24>
 138:	8f 01       	movw	r16, r30
 13a:	c0 e0       	ldi	r28, 0x00	; 0
		lcdData(str[i]);
 13c:	0e 94 4c 00 	call	0x98	; 0x98 <lcdData>
		i++;
 140:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(100);
}

void lcd_print(char *str){
	unsigned char i = 0;
	while(str[i] != 0){
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	f1 1d       	adc	r31, r1
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <lcd_print+0x12>
		lcdData(str[i]);
		i++;
	}
}
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <main>:


int main(void)
{
	lcd_init();
 156:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
	lcd_gotoxy(1,1);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("in main");
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f e3       	ldi	r18, 0x3F	; 63
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x1a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x24>
 17a:	00 00       	nop
	/*lcdCommand(0x01);
	lcd_gotoxy(1,1);
	lcd_print("in main 2");
	_delay_ms(1000);*/
	
	DDRC |= 0x03; //DDRC.0 and DDRC.1 output
 17c:	84 b3       	in	r24, 0x14	; 20
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	84 bb       	out	0x14, r24	; 20
	
	TCNT0 = -160;
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	83 bf       	out	0x33, r24	; 51
	
	TCNT1H = (-640)>>8;
 18a:	9d ef       	ldi	r25, 0xFD	; 253
 18c:	9d bd       	out	0x2d, r25	; 45
	TCNT1L = (-640);
 18e:	90 e8       	ldi	r25, 0x80	; 128
 190:	9c bd       	out	0x2c, r25	; 44
	TCCR1A = 0x00;
 192:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x01;
 194:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK = (1<<TOIE0)|(1<<TOIE1);
 196:	85 e0       	ldi	r24, 0x05	; 5
 198:	89 bf       	out	0x39, r24	; 57
	sei();
 19a:	78 94       	sei
	
	while (1)
	{
		lcd_init();
 19c:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
		lcd_gotoxy(1,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
		lcd_print("in main 2");
 1a8:	88 e6       	ldi	r24, 0x68	; 104
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 1b0:	2f e3       	ldi	r18, 0x3F	; 63
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x60>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x6a>
 1c0:	00 00       	nop
 1c2:	ec cf       	rjmp	.-40     	; 0x19c <main+0x46>

000001c4 <__vector_11>:
		_delay_ms(1000);
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	//lcdCommand(0x01);
	lcd_init();
 1e6:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
	lcd_gotoxy(1,1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("in t0_ov");
 1f2:	82 e7       	ldi	r24, 0x72	; 114
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
	lcd_gotoxy(1, 2);
 1fa:	62 e0       	ldi	r22, 0x02	; 2
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("handler");
 202:	8b e7       	ldi	r24, 0x7B	; 123
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 20a:	2f e3       	ldi	r18, 0x3F	; 63
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <__vector_11+0x4c>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__vector_11+0x56>
 21a:	00 00       	nop
	_delay_ms(1000);
	
	sei();
 21c:	78 94       	sei
	
	TCNT0 = -160;
 21e:	80 e6       	ldi	r24, 0x60	; 96
 220:	82 bf       	out	0x32, r24	; 50
	PORTC ^= 0x01; //toggle portb.0
 222:	95 b3       	in	r25, 0x15	; 21
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	89 27       	eor	r24, r25
 228:	85 bb       	out	0x15, r24	; 21
	lcd_gotoxy(1,1);
	lcd_print("end of t0_ov");
	lcd_gotoxy(1, 2);
	lcd_print("handler");
	_delay_ms(1000);*/
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_9>:

ISR(TIMER1_OVF_vect){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	//lcdCommand(0x01);
	lcd_init();
 26e:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
	lcd_gotoxy(1,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("in t1_ov");
 27a:	83 e8       	ldi	r24, 0x83	; 131
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
	lcd_gotoxy(1, 2);
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_gotoxy>
	lcd_print("handler");
 28a:	8b e7       	ldi	r24, 0x7B	; 123
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_print>
 292:	2f e3       	ldi	r18, 0x3F	; 63
 294:	8d e0       	ldi	r24, 0x0D	; 13
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__vector_9+0x4c>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__vector_9+0x56>
 2a2:	00 00       	nop
	_delay_ms(1000);
	
	sei();
 2a4:	78 94       	sei
	
	TCNT1H = (-640)>>8;
 2a6:	8d ef       	ldi	r24, 0xFD	; 253
 2a8:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = (-640);
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	8c bd       	out	0x2c, r24	; 44
	PORTC ^= 0x02; //toggle protb.1
 2ae:	95 b3       	in	r25, 0x15	; 21
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	89 27       	eor	r24, r25
 2b4:	85 bb       	out	0x15, r24	; 21
	lcd_gotoxy(1,1);
	lcd_print("end of in t1_ov");
	lcd_gotoxy(1, 2);
	lcd_print("handler");
	_delay_ms(1000);*/
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
